{"ast":null,"code":"import validator from \"validator\";\n\nconst ValidateRegisterInput = data => {\n  let errors = {};\n  const {\n    name,\n    email,\n    password,\n    confirm_password\n  } = data;\n\n  if (validator.isEmpty(name)) {\n    errors.name = \"Name field is required\";\n  }\n\n  if (!validator.isEmail(email)) {\n    errors.email = \"please Enter valid Email address.\";\n  }\n\n  if (validator.isEmpty(email)) {\n    errors.email = \"Email field is required\";\n  } // if (validator.isStrongPassword(password))\n  // {\n  //     errors.password=\"enter strong password\"\n  // }\n\n\n  if (password) {\n    errors.password = \"enter below 8 \";\n  }\n\n  password.onkeyup = function () {\n    // Validate lowercase letters\n    var lowerCaseLetters = /[a-z]/g;\n\n    if (myInput.value.match(lowerCaseLetters)) {\n      letter.classList.remove(\"invalid\");\n      letter.classList.add(\"valid\");\n    } else {\n      letter.classList.remove(\"valid\");\n      letter.classList.add(\"invalid\");\n    } // Validate capital letters\n\n\n    var upperCaseLetters = /[A-Z]/g;\n\n    if (myInput.value.match(upperCaseLetters)) {\n      capital.classList.remove(\"invalid\");\n      capital.classList.add(\"valid\");\n    } else {\n      capital.classList.remove(\"valid\");\n      capital.classList.add(\"invalid\");\n    } // Validate numbers\n\n\n    var numbers = /[0-9]/g;\n\n    if (myInput.value.match(numbers)) {\n      number.classList.remove(\"invalid\");\n      number.classList.add(\"valid\");\n    } else {\n      number.classList.remove(\"valid\");\n      number.classList.add(\"invalid\");\n    } // Validate length\n\n\n    if (myInput.value.length >= 8) {\n      length.classList.remove(\"invalid\");\n      length.classList.add(\"valid\");\n    } else {\n      length.classList.remove(\"valid\");\n      length.classList.add(\"invalid\");\n    }\n  };\n\n  if (validator.isEmpty(password)) {\n    errors.password = \"Password field is required\";\n  }\n\n  if (!validator.equals(password, confirm_password)) {\n    errors.confirm_password = \"password should match\";\n  }\n\n  if (validator.isEmpty(confirm_password)) {\n    errors.confirm_password = \" Confirm password field is required\";\n  }\n\n  return {\n    isInvalid: Object.keys(errors).length > 0,\n    errors: errors\n  };\n};\n\nexport default ValidateRegisterInput;","map":{"version":3,"names":["validator","ValidateRegisterInput","data","errors","name","email","password","confirm_password","isEmpty","isEmail","onkeyup","lowerCaseLetters","myInput","value","match","letter","classList","remove","add","upperCaseLetters","capital","numbers","number","length","equals","isInvalid","Object","keys"],"sources":["/home/ts/Desktop/pract_vue/Restaurants/restro_project/src/validation/ValidateRegisterInput.js"],"sourcesContent":["import validator from \"validator\";\n\nconst ValidateRegisterInput = (data) => {\n\n    let errors = {};\n\n    const { name, email, password, confirm_password } = data\n\n    if (validator.isEmpty(name)) {\n        errors.name = \"Name field is required\"\n    }\n\n    if(!validator.isEmail(email)){\n        errors.email=\"please Enter valid Email address.\"\n    }\n    if (validator.isEmpty(email)) {\n        errors.email = \"Email field is required\"\n    }\n\n    // if (validator.isStrongPassword(password))\n    // {\n    //     errors.password=\"enter strong password\"\n    // }\n\n    if (password) {\n        errors.password=\"enter below 8 \"\n        \n    }\n    password.onkeyup = function () {\n        // Validate lowercase letters\n        var lowerCaseLetters = /[a-z]/g;\n        if (myInput.value.match(lowerCaseLetters)) {\n            letter.classList.remove(\"invalid\");\n            letter.classList.add(\"valid\");\n        } else {\n            letter.classList.remove(\"valid\");\n            letter.classList.add(\"invalid\");\n        }\n\n        // Validate capital letters\n        var upperCaseLetters = /[A-Z]/g;\n        if (myInput.value.match(upperCaseLetters)) {\n            capital.classList.remove(\"invalid\");\n            capital.classList.add(\"valid\");\n        } else {\n            capital.classList.remove(\"valid\");\n            capital.classList.add(\"invalid\");\n        }\n\n        // Validate numbers\n        var numbers = /[0-9]/g;\n        if (myInput.value.match(numbers)) {\n            number.classList.remove(\"invalid\");\n            number.classList.add(\"valid\");\n        } else {\n            number.classList.remove(\"valid\");\n            number.classList.add(\"invalid\");\n        }\n\n        // Validate length\n        if (myInput.value.length >= 8) {\n            length.classList.remove(\"invalid\");\n            length.classList.add(\"valid\");\n        } else {\n            length.classList.remove(\"valid\");\n            length.classList.add(\"invalid\");\n        }\n    }\n\n    if (validator.isEmpty(password)) {\n        errors.password = \"Password field is required\"\n    }   \n\n    if (!validator.equals(password,confirm_password)){\n        errors.confirm_password=\"password should match\"\n    }\n\n    if (validator.isEmpty(confirm_password)) {\n        errors.confirm_password = \" Confirm password field is required\"\n    }\n\n    return {\n        isInvalid: Object.keys(errors).length > 0,\n        errors: errors,\n    }\n};\nexport default ValidateRegisterInput\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}