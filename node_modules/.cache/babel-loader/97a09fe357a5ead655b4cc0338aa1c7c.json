{"ast":null,"code":"import { mapActions } from 'vuex';\nimport HeaderNav from './Header.vue';\nimport FilterToDo from './FilterToDo.vue';\nimport store from '@/store';\nexport default {\n  name: \"ToDo\",\n  components: {\n    HeaderNav,\n    FilterToDo\n  },\n\n  // computed: mapGetters(['alltodo']),\n  created() {\n    this.fetchUser(), this.testCall(data.page = 1, data.perPage = 5);\n  },\n\n  data: function () {\n    return {\n      NameSearch: \"\",\n      NewName: \"\",\n      NewEmail: '',\n      ToDoId: '',\n      ToDoName: \"\",\n      ToDoEmail: \"\",\n      R_Id: \"\",\n      R_name: '',\n      page: \"\",\n      perPage: ''\n    };\n  },\n  computed: {\n    computeAlltodo() {\n      if (!this.alltodo) {\n        return [];\n      } else {\n        const firstIndex = (this.page - 1) * this.perPage;\n        const lastIndex = this.page * this.perPage;\n        return this.alltodo.slice(firstIndex, lastIndex);\n      }\n    },\n\n    alltodo() {\n      return store.getters.alltodo;\n    }\n\n  },\n  methods: { ...mapActions(['fetchUser', 'RemoveId', 'updateToDo', 'addNewName', 'searchdata']),\n\n    EditTodo(todo) {\n      this.ToDoName = todo.name;\n      this.ToDoEmail = todo.email;\n      this.ToDoId = todo.id;\n    },\n\n    NewData(data) {\n      this.NewName = data.NewName;\n      this.NewEmail = data.NewEmail;\n      this.addNewName({\n        id: \"New Id\",\n        name: this.NewName,\n        email: this.NewEmail\n      });\n    },\n\n    removeToDo(data) {\n      this.R_Id = data.id;\n      this.R_name = data.name;\n    },\n\n    testCall(data) {\n      this.page = data.page;\n      this.perPage = data.perPage;\n    }\n\n  },\n\n  mounted() {\n    const user = localStorage.getItem('user - info');\n\n    if (!user) {\n      this.$router.push({\n        name: 'LogIn'\n      });\n    }\n  }\n\n};","map":{"version":3,"mappings":"AA2IA,SAAUA,UAAV,QAA4B,MAA5B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe;EACXC,IAAI,EAAE,MADK;EAEXC,UAAU,EAAE;IACRJ,SADQ;IACGC;EADH,CAFD;;EAMX;EACAI,OAAO,GAAG;IACN,KAAKC,SAAL,IACI,KAAKC,QAAL,CAAcC,IAAI,CAACC,IAAL,GAAY,CAA1B,EAA6BD,IAAI,CAACE,OAAL,GAAa,CAA1C,CADJ;EAEH,CAVU;;EAWXF,IAAI,EAAE,YAAY;IACd,OAAO;MACHG,UAAU,EAAE,EADT;MAEHC,OAAO,EAAE,EAFN;MAGHC,QAAQ,EAAE,EAHP;MAIHC,MAAM,EAAE,EAJL;MAKHC,QAAQ,EAAE,EALP;MAMHC,SAAS,EAAE,EANR;MAOHC,IAAI,EAAE,EAPH;MAQHC,MAAM,EAAE,EARL;MASHT,IAAI,EAAE,EATH;MAUHC,OAAO,EAAE;IAVN,CAAP;EAYH,CAxBU;EAyBXS,QAAQ,EAAE;IACNC,cAAc,GAAG;MACb,IAAI,CAAC,KAAKC,OAAV,EAAmB;QACf,OAAO,EAAP;MACH,CAFD,MAEK;QAED,MAAMC,UAAS,GAAG,CAAC,KAAKb,IAAL,GAAU,CAAX,IAAe,KAAKC,OAAtC;QACA,MAAMa,SAAS,GAAC,KAAKd,IAAL,GAAU,KAAKC,OAA/B;QACA,OAAO,KAAKW,OAAL,CAAaG,KAAb,CAAmBF,UAAnB,EAA8BC,SAA9B,CAAP;MACJ;IACH,CAVK;;IAWNF,OAAO,GAAG;MACN,OAAOnB,KAAK,CAACuB,OAAN,CAAcJ,OAArB;IAEJ;;EAdM,CAzBC;EAyCXK,OAAO,EAAE,EACL,GAAG3B,UAAU,CAAC,CAAC,WAAD,EAAc,UAAd,EAA0B,YAA1B,EAAwC,YAAxC,EAAsD,YAAtD,CAAD,CADR;;IAGL4B,QAAQ,CAACC,IAAD,EAAO;MAEX,KAAKb,QAAL,GAAgBa,IAAI,CAACzB,IAArB;MACA,KAAKa,SAAL,GAAiBY,IAAI,CAACC,KAAtB;MACA,KAAKf,MAAL,GAAcc,IAAI,CAACE,EAAnB;IACH,CARI;;IASLC,OAAO,CAACvB,IAAD,EAAO;MACV,KAAKI,OAAL,GAAeJ,IAAI,CAACI,OAApB;MACA,KAAKC,QAAL,GAAgBL,IAAI,CAACK,QAArB;MACA,KAAKmB,UAAL,CAAgB;QAAEF,EAAE,EAAE,QAAN;QAAgB3B,IAAI,EAAE,KAAKS,OAA3B;QAAoCiB,KAAK,EAAE,KAAKhB;MAAhD,CAAhB;IACH,CAbI;;IAcLoB,UAAU,CAACzB,IAAD,EAAO;MACb,KAAKS,IAAL,GAAYT,IAAI,CAACsB,EAAjB;MACA,KAAKZ,MAAL,GAAcV,IAAI,CAACL,IAAnB;IACH,CAjBI;;IAkBLI,QAAQ,CAACC,IAAD,EAAO;MACX,KAAKC,IAAL,GAAYD,IAAI,CAACC,IAAjB;MACA,KAAKC,OAAL,GAAeF,IAAI,CAACE,OAApB;IAGJ;;EAvBK,CAzCE;;EAmEXwB,OAAO,GAAG;IAEN,MAAMC,IAAG,GAAIC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAb;;IACA,IAAI,CAACF,IAAL,EAAW;MACP,KAAKG,OAAL,CAAaC,IAAb,CAAkB;QAAEpC,IAAI,EAAE;MAAR,CAAlB;IACJ;EAEJ;;AA1EW,CAAf","names":["mapActions","HeaderNav","FilterToDo","store","name","components","created","fetchUser","testCall","data","page","perPage","NameSearch","NewName","NewEmail","ToDoId","ToDoName","ToDoEmail","R_Id","R_name","computed","computeAlltodo","alltodo","firstIndex","lastIndex","slice","getters","methods","EditTodo","todo","email","id","NewData","addNewName","removeToDo","mounted","user","localStorage","getItem","$router","push"],"sourceRoot":"","sources":["/home/ts/Desktop/pract_vue/Restaurants/restro_project/src/components/ToDo.vue"],"sourcesContent":["<template>\n    <HeaderNav />\n    <div class=\"row\">\n        <div class=\"col\">\n            <div class=\"col\">\n                <h3 class=\"text-success\">ToDo Manager</h3>\n            </div>\n            <button type=\"button\" class=\"btn btn-success mt-3 mb-3\" data-toggle=\"modal\" data-target=\"#NewName\"\n                data-whatever=\"@mdo\">Enter New Data</button>\n            <div class=\"col-3\">\n                <form class=\"d-flex\" @submit.prevent=\"searchdata(NameSearch)\">\n                    <input class=\"form-control me-2\" type=\"search\" v-model=\"NameSearch\" placeholder=\"Search\"\n                        aria-label=\"Search\">\n                    <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\n                </form>\n            </div>\n            {{ perPage }}\n            <FilterToDo   :totalRecords=\"alltodo.length\"  @input=\"testCall\" />\n\n            <div class=\" modal fade mt-3\" id=\"NewName\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\"\n                aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"exampleModalLabel\">New Entry</h5>\n                            <button type=\"button\" class=\"close border-bone\"\n                                style=\"border: none ; background-color: transparent;\" data-dismiss=\"modal\"\n                                aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <form>\n                                <div class=\"form-group\">\n                                    <label for=\"recipient-name\" class=\"col-form-label\">Name</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"recipient-name\" v-model=\"NewName\">\n                                </div>\n                                <div class=\"form-group\">\n                                    <label for=\"message-text\" class=\"col-form-label\">Email</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"recipient-name\" v-model=\"NewEmail\">\n\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <!-- <input class=\"btn btn-primary\" type=\"submit\" value=\"Save Data\"> -->\n                                    <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\"\n                                        @click=\"NewData({ NewName, NewEmail })\">Save Data</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">User's Name</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\" (todo, index) in computeAlltodo\" :key=\"index\">\n                        <th>{{ todo.id }}</th>\n                        <td>{{ todo.name }} </td>\n                        <td>{{ todo.email }} </td>\n                        <td><button @click=\"removeToDo(todo)\"\n                                style=\"border:none; background:transparent;cursor: pointer; outline: none; \"\n                                class=\"text-danger\" data-target=\"#exampleModalCenter\" data-toggle=\"modal\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"25\" height=\"25\" fill=\"currentColor\"\n                                    class=\"bi bi-x-lg\" viewBox=\"0 0 16 16\">\n                                    <path\n                                        d=\"M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z\" />\n                                </svg>\n                            </button>\n                        </td>\n                        <td>\n                            <button type=\"button\" class=\"btn btn-primary\" data-toggle=\"modal\"\n                                data-target=\"#exampleModal\" @click=\"EditTodo(todo)\">Edit\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <!-- Modal for delete  -->\n            <div class=\"modal fade\" id=\"exampleModalCenter\" tabindex=\"-1\" role=\"dialog\"\n                aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n                <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-body\">\n                            <h3 class=\"text-danger\">Are You sure ?? <br> <span class=\"text-primary\">{{ R_name }} will\n                                    deleted</span></h3>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-success\" data-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-danger\" data-dismiss=\"modal\"\n                                @click=\"RemoveId(R_Id)\">Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- Modal for edit  -->\n            <div class=\" modal fade\" id=\"exampleModal\" role=\"dialog\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\"\n                aria-hidden=\"true\">\n                <div class=\"modal-dialog\" role=\"document\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\" id=\"exampleModalLabel\">Edit Name</h5>\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\n                                style=\"border: none ; background-color: transparent; \">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <form @submit.prevent=\"updateToDo({ ToDoId, ToDoName, ToDoEmail })\">\n                                <div class=\"form-group\">\n                                    <label for=\"message-text\" class=\"col-form-label\">Name</label>\n                                    <input type=\"name\" class=\"form-control\" id=\"recipient-name\" required\n                                        placeholder=\"Edit your Name here..\" v-model=\"ToDoName\">\n                                </div>\n                                <div class=\"form-group mt-2\">\n                                    <label for=\"message-text\" class=\"col-form-label\">Email</label>\n                                    <input type=\"email\" class=\"form-control\" id=\"recipient-name\" required\n                                        placeholder=\"Edit your Email here..\" v-model=\"ToDoEmail\">\n                                </div>\n                                <div class=\"modal-footer\">\n                                    <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">close</button>\n                                    <button type=\"submit\" class=\"btn btn-success\">Save</button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {  mapActions } from 'vuex'\nimport HeaderNav from './Header.vue'\nimport FilterToDo from './FilterToDo.vue'\nimport store from '@/store'\n\nexport default {\n    name: \"ToDo\",\n    components: {\n        HeaderNav, FilterToDo\n    },\n\n    // computed: mapGetters(['alltodo']),\n    created() {\n        this.fetchUser(),\n            this.testCall(data.page = 1, data.perPage=5)\n    },\n    data: function () {\n        return {\n            NameSearch: \"\",\n            NewName: \"\",\n            NewEmail: '',\n            ToDoId: '',\n            ToDoName: \"\",\n            ToDoEmail: \"\",\n            R_Id: \"\",\n            R_name: '',\n            page: \"\",\n            perPage: ''\n        }\n    },\n    computed: {\n        computeAlltodo() {\n            if (!this.alltodo) {\n                return []\n            }else{\n\n                const firstIndex =(this.page-1)*(this.perPage)\n                const lastIndex=this.page*this.perPage\n                return this.alltodo.slice(firstIndex,lastIndex)\n            }\n        },\n        alltodo() {\n            return store.getters.alltodo;\n            \n        }\n    },\n    methods: {\n        ...mapActions(['fetchUser', 'RemoveId', 'updateToDo', 'addNewName', 'searchdata']),\n\n        EditTodo(todo) {\n\n            this.ToDoName = todo.name\n            this.ToDoEmail = todo.email\n            this.ToDoId = todo.id\n        },\n        NewData(data) {\n            this.NewName = data.NewName\n            this.NewEmail = data.NewEmail\n            this.addNewName({ id: \"New Id\", name: this.NewName, email: this.NewEmail });\n        },\n        removeToDo(data) {\n            this.R_Id = data.id\n            this.R_name = data.name\n        },\n        testCall(data) {\n            this.page = data.page\n            this.perPage = data.perPage\n            \n\n        }\n\n    },\n    mounted() {\n\n        const user = localStorage.getItem('user - info')\n        if (!user) {\n            this.$router.push({ name: 'LogIn' })\n        }\n\n    }\n}\n\n</script>   \n\n"]},"metadata":{},"sourceType":"module"}